import{r as s,j as n}from"./index-D2MUXnTG.js";import{b as E,c as p,T as S,d as y,V as x,C as F,P as k,M as z,a as R,u as C,A as _}from"./MouseHandler-BtVpYj15.js";import{u as O}from"./leva.esm-CCW7ngY5.js";const g=e=>e===Object(e)&&!Array.isArray(e)&&typeof e!="function";function b(e,u){const i=E(a=>a.gl),t=p(y,g(e)?Object.values(e):e);return s.useLayoutEffect(()=>{u==null||u(t)},[u]),s.useEffect(()=>{if("initTexture"in i){let a=[];Array.isArray(t)?a=t:t instanceof S?a=[t]:g(t)&&(a=Object.values(t)),a.forEach(r=>{r instanceof S&&i.initTexture(r)})}},[i,t]),s.useMemo(()=>{if(g(e)){const a={};let r=0;for(const l in e)a[l]=t[r++];return a}else return t},[e,t])}b.preload=e=>p.preload(y,e);b.clear=e=>p.clear(y,e);const U="/particle-system/assets/smoke_01-ZgdlhCLp.png",V="uniform sampler2D uTexture;uniform vec3 uStartColor;uniform vec3 uEndColor;varying float vAlpha;varying vec2 vAngle;void main(){vec2 coords=(gl_PointCoord-0.5)*mat2(vAngle.x,vAngle.y,-vAngle.y,vAngle.x)+0.5;vec4 texture=texture2D(uTexture,coords);vec3 color=mix(uEndColor,uStartColor,vAlpha);gl_FragColor=vec4(texture.rgb*color,texture.a*vAlpha);}",D="attribute float alpha;attribute float scale;attribute float angle;uniform float uScaleFactor;varying float vAlpha;varying vec2 vAngle;void main(){vAlpha=alpha;vAngle=vec2(cos(angle),sin(angle));vec4 mvPosition=modelViewMatrix*vec4(position,1.0);gl_Position=projectionMatrix*mvPosition;gl_PointSize=(scale*uScaleFactor)/-mvPosition.z;}",N=()=>{const{speed:e,startColor:u,endColor:i}=O({speed:{value:1,min:0,max:1,step:.1},startColor:"#ff00ff",endColor:"#363bff"}),t=s.useRef(new x);return n.jsxs(F,{className:"cursor-crosshair bg-dark",children:[n.jsx(k,{makeDefault:!0,position:[0,0,10]}),n.jsx(z,{mousePositionRef:t}),n.jsx(I,{speed:e,startColor:u,endColor:i,mousePos:t.current})]})},I=({speed:e,startColor:u,endColor:i,mousePos:t,minLifetime:m=1,maxLifetime:a=1.5,particleCount:r=5e3})=>{const l=s.useRef(null),v=s.useRef(null),d=s.useRef(new Float32Array(r*3)),A=s.useRef(new Float32Array(r)),M=s.useRef(new Float32Array(r)),j=s.useRef(new Float32Array(r)),T=b(U),P=s.useMemo(()=>{const h=[];for(let f=0;f<r;f++)h.push({position:new x().copy(t),velocity:new x((Math.random()-.5)*e,(Math.random()-.5)*e,(Math.random()-.5)*e),lifetime:Math.random()*a+m,scale:Math.random()*1+.5,angle:Math.random()*Math.PI*2});return h},[e,m,a]),w=s.useMemo(()=>({uScaleFactor:{value:1e3},uTexture:{value:T},uEndColor:{value:new R(i)},uStartColor:{value:new R(u)}}),[]);return s.useEffect(()=>{v.current&&(v.current.uniforms.uStartColor.value.set(u),v.current.uniforms.uEndColor.value.set(i))},[u,i]),C((h,f)=>{if(l.current){for(let c=0;c<r;c++){const o=P[c];o.lifetime<=0&&(o.position.copy(t),o.velocity.set((Math.random()-.5)*e,(Math.random()-.5)*e,(Math.random()-.5)*e),o.lifetime=Math.random()*a+m),o.lifetime-=f,o.position.addScaledVector(o.velocity,f),d.current[c*3]=o.position.x,d.current[c*3+1]=o.position.y,d.current[c*3+2]=o.position.z,A.current[c*3]=o.scale,M.current[c]=Math.max(o.lifetime/a,0),j.current[c]+=o.angle*(f*.01)}l.current.geometry.attributes.alpha.needsUpdate=!0,l.current.geometry.attributes.angle.needsUpdate=!0,l.current.geometry.attributes.scale.needsUpdate=!0,l.current.geometry.attributes.position.needsUpdate=!0}}),n.jsxs("points",{ref:l,children:[n.jsxs("bufferGeometry",{children:[n.jsx("bufferAttribute",{attach:"attributes-position",array:d.current,itemSize:3,count:r}),n.jsx("bufferAttribute",{attach:"attributes-alpha",array:M.current,itemSize:1,count:r}),n.jsx("bufferAttribute",{attach:"attributes-scale",array:A.current,itemSize:1,count:r}),n.jsx("bufferAttribute",{attach:"attributes-angle",array:j.current,itemSize:1,count:r})]}),n.jsx("shaderMaterial",{ref:v,blending:_,depthTest:!1,transparent:!0,uniforms:w,vertexShader:D,fragmentShader:V})]})};export{N as default};
