import{r as i,j as r}from"./index-CRHVeYKn.js";import{V as l,C as S,P as A,M as V,u as _}from"./MouseHandler-D1U2crIu.js";const F="attribute float scale;attribute vec3 color;uniform float maxSize;varying vec3 vColor;void main(){vec4 mvPosition=modelViewMatrix*vec4(position,1.0);gl_Position=projectionMatrix*mvPosition;gl_PointSize=scale/-mvPosition.z;vColor=mix(vec3(1.0),color,scale/maxSize);}",p="varying vec3 vColor;void main(){float distance=length(gl_PointCoord-vec2(0.5));float alpha=1.0-smoothstep(0.49,0.5,distance);if(alpha<0.5){discard;}gl_FragColor=vec4(vColor,alpha);}",j=[[1,0,0],[0,1,0],[0,0,1]],k=()=>j[Math.floor(Math.random()*j.length)],G=()=>{const a=i.useRef(new l);return r.jsxs(S,{className:"cursor-crosshair bg-dark pointer-events-none",children:[r.jsx(A,{makeDefault:!0,position:[0,0,10]}),r.jsx(V,{mousePositionRef:a}),r.jsx(E,{mousePos:a.current})]})},E=({mousePos:a,distanceThreshold:R=2.5,sphereRad:h=2,minSize:v=30,maxSize:y=200,particleCount:s=3e3})=>{const u=i.useRef(new l),x=i.useRef(null),P=i.useRef(null),d=i.useRef(new Float32Array(s*3)),m=i.useRef(new Float32Array(s*3)),g=i.useRef(new Float32Array(s)),w=i.useMemo(()=>{const t=Math.PI*(3-Math.sqrt(5));return Array.from({length:s},(f,o)=>{const e=t*o,c=Math.acos(1-2*(o+.5)/s),n=h*Math.sin(c)*Math.cos(e),M=h*Math.sin(c)*Math.sin(e),b=h*Math.cos(c);return{originalPosition:new l(n,M,b),position:new l(n,M,b),velocity:new l,scale:v,color:new l().fromArray(k())}})},[s,h,v]),z=(t,f)=>{const o=t.position.distanceTo(a),e=a.x+a.y+a.z!==0&&o<=R;if(u.current.set(0,0,0),e){u.current.subVectors(a,t.position),u.current.normalize();const c=Math.max(.2,1-o/3);t.velocity.addScaledVector(u.current,c*f),t.scale=Math.min(y,t.scale+Math.log(o*1.5))}else u.current.subVectors(t.originalPosition,t.position),t.velocity.addScaledVector(u.current,f),t.velocity.multiplyScalar(.95),t.scale=Math.max(v,t.scale-Math.log(t.scale));t.position.add(t.velocity)};return _((t,f)=>{if(!x.current)return;w.forEach((e,c)=>{z(e,f);const n=c*3;d.current[n]=e.position.x,d.current[n+1]=e.position.y,d.current[n+2]=e.position.z,m.current[n]=e.color.x,m.current[n+1]=e.color.y,m.current[n+2]=e.color.z,g.current[c]=e.scale});const o=x.current.geometry;o.attributes.position.needsUpdate=!0,o.attributes.color.needsUpdate=!0,o.attributes.scale.needsUpdate=!0}),r.jsxs("points",{ref:x,children:[r.jsxs("bufferGeometry",{children:[r.jsx("bufferAttribute",{attach:"attributes-position",array:d.current,itemSize:3,count:s}),r.jsx("bufferAttribute",{attach:"attributes-color",array:m.current,itemSize:3,count:s}),r.jsx("bufferAttribute",{attach:"attributes-scale",array:g.current,itemSize:1,count:s})]}),r.jsx("shaderMaterial",{ref:P,fragmentShader:p,vertexShader:F,uniforms:{maxSize:{value:y}}})]})};export{G as BlobNoiseScene,G as default};
